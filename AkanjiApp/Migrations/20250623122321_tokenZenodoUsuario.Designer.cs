// <auto-generated />
using System;
using AkanjiApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AkanjiApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250623122321_tokenZenodoUsuario")]
    partial class tokenZenodoUsuario
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AkanjiApp.Models.Documento", b =>
                {
                    b.Property<string>("DOI")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "doi");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<DateTime?>("FechaPublicacion")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "publication_date");

                    b.Property<string>("Keywords")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "keywords");

                    b.Property<string>("Language")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "language");

                    b.Property<string>("Publisher")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "publisher");

                    b.Property<string>("ResourceType")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "resource_type_general");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.Property<string>("Version")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "version");

                    b.HasKey("DOI");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("AkanjiApp.Models.DocumentoAutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Affiliation")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "affiliation");

                    b.Property<string>("Apellido")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentoDOI")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DocumentoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("ORCID")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoDOI");

                    b.HasIndex("DocumentoId");

                    b.ToTable("DocumentoAutores");

                    b.HasAnnotation("Relational:JsonPropertyName", "contributors");
                });

            modelBuilder.Entity("AkanjiApp.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ZenodoToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AkanjiApp.Models.Documento", b =>
                {
                    b.OwnsMany("AkanjiApp.Models.AlternateIdentifier", "AlternateIdentifiers", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("DocumentoDOI")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Identifier")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasAnnotation("Relational:JsonPropertyName", "alternate_identifier");

                            b1.Property<string>("Type")
                                .HasColumnType("longtext")
                                .HasAnnotation("Relational:JsonPropertyName", "alternate_identifier_type");

                            b1.HasKey("Id");

                            b1.HasIndex("DocumentoDOI");

                            b1.ToTable("AlternateIdentifier");

                            b1.HasAnnotation("Relational:JsonPropertyName", "alternate_identifiers");

                            b1.WithOwner()
                                .HasForeignKey("DocumentoDOI");
                        });

                    b.OwnsMany("AkanjiApp.Models.Funder", "Funders", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("DocumentoDOI")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("GrantNumber")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasAnnotation("Relational:JsonPropertyName", "grant_number");

                            b1.Property<string>("Identifier")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Scheme")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("Id");

                            b1.HasIndex("DocumentoDOI");

                            b1.ToTable("Funder");

                            b1.HasAnnotation("Relational:JsonPropertyName", "funders");

                            b1.WithOwner()
                                .HasForeignKey("DocumentoDOI");
                        });

                    b.OwnsMany("AkanjiApp.Models.LicenciaDerechos", "RightsList", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("DocumentoDOI")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Rights")
                                .HasColumnType("longtext")
                                .HasAnnotation("Relational:JsonPropertyName", "rights");

                            b1.Property<string>("RightsUri")
                                .HasColumnType("longtext")
                                .HasAnnotation("Relational:JsonPropertyName", "rightsUri");

                            b1.HasKey("Id");

                            b1.HasIndex("DocumentoDOI");

                            b1.ToTable("LicenciaDerechos");

                            b1.HasAnnotation("Relational:JsonPropertyName", "rights_list");

                            b1.WithOwner()
                                .HasForeignKey("DocumentoDOI");
                        });

                    b.OwnsMany("AkanjiApp.Models.RelatedIdentifier", "RelatedIdentifiers", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("DocumentoDOI")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Identifier")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasAnnotation("Relational:JsonPropertyName", "identifier");

                            b1.Property<string>("RelationType")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasAnnotation("Relational:JsonPropertyName", "relation_type");

                            b1.Property<string>("ResourceTypeGeneral")
                                .HasColumnType("longtext")
                                .HasAnnotation("Relational:JsonPropertyName", "resource_type_general");

                            b1.HasKey("Id");

                            b1.HasIndex("DocumentoDOI");

                            b1.ToTable("RelatedIdentifier");

                            b1.HasAnnotation("Relational:JsonPropertyName", "related_identifiers");

                            b1.WithOwner()
                                .HasForeignKey("DocumentoDOI");
                        });

                    b.OwnsMany("AkanjiApp.Models.Subject", "Subjects", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("DocumentoDOI")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Text")
                                .HasColumnType("longtext")
                                .HasAnnotation("Relational:JsonPropertyName", "subject");

                            b1.HasKey("Id");

                            b1.HasIndex("DocumentoDOI");

                            b1.ToTable("Subject");

                            b1.HasAnnotation("Relational:JsonPropertyName", "subjects");

                            b1.WithOwner()
                                .HasForeignKey("DocumentoDOI");
                        });

                    b.Navigation("AlternateIdentifiers");

                    b.Navigation("Funders");

                    b.Navigation("RelatedIdentifiers");

                    b.Navigation("RightsList");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("AkanjiApp.Models.DocumentoAutor", b =>
                {
                    b.HasOne("AkanjiApp.Models.Documento", null)
                        .WithMany("Contributors")
                        .HasForeignKey("DocumentoDOI");

                    b.HasOne("AkanjiApp.Models.Documento", "Documento")
                        .WithMany("Autores")
                        .HasForeignKey("DocumentoId");

                    b.Navigation("Documento");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AkanjiApp.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AkanjiApp.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkanjiApp.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AkanjiApp.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AkanjiApp.Models.Documento", b =>
                {
                    b.Navigation("Autores");

                    b.Navigation("Contributors");
                });
#pragma warning restore 612, 618
        }
    }
}
